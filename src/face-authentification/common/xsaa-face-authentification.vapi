/* xsaa-face-authentification.vapi generated by valac-0.12 0.12.1-dirty, do not modify. */

[CCode (cprefix = "XSAA", lower_case_cprefix = "xsaa_")]
namespace XSAA {
	[CCode (cprefix = "XSAAFaceAuthentification", lower_case_cprefix = "xsaa_face_authentification_")]
	namespace FaceAuthentification {
		[CCode (cprefix = "XSAAFaceAuthentificationImage", lower_case_cprefix = "xsaa_face_authentification_image_")]
		namespace Image {
			[CCode (cheader_filename = "xsaa-face-authentification.h")]
			public const int HEIGHT;
			[CCode (cheader_filename = "xsaa-face-authentification.h")]
			public const int SIZE;
			[CCode (cheader_filename = "xsaa-face-authentification.h")]
			public const int WIDTH;
		}
		[CCode (cprefix = "XSAAFaceAuthentificationIpcKey", lower_case_cprefix = "xsaa_face_authentification_ipc_key_")]
		namespace IpcKey {
			[CCode (cheader_filename = "xsaa-face-authentification.h")]
			public const Os.key_t IMAGE;
			[CCode (cheader_filename = "xsaa-face-authentification.h")]
			public const Os.key_t STATUS;
		}
		[CCode (cheader_filename = "xsaa-face-authentification.h")]
		public class Detector : GLib.Object {
			[CCode (cprefix = "XSAA_FACE_AUTHENTIFICATION_DETECTOR_STATUS_", cheader_filename = "xsaa-face-authentification.h")]
			public enum Status {
				INVALID,
				TO_FAR,
				TO_CLOSER,
				UNABLE_TO_DETECT,
				LOST_TRACKER,
				TRACKING,
				CAPTURE,
				FINISHED;
				public string to_string ();
			}
			public Detector ();
			public OpenCV.IPL.Image? clip_face (OpenCV.IPL.Image? inInputImage);
			public void run (OpenCV.IPL.Image? inInput);
			public bool detected { get; }
			public bool eyes_detected { get; }
			public XSAA.FaceAuthentification.Eyes eyes_information { get; }
			public bool face_detected { get; }
			public XSAA.FaceAuthentification.Face face_information { get; }
			public XSAA.FaceAuthentification.Detector.Status status { get; set; }
		}
		[CCode (cheader_filename = "xsaa-face-authentification.h")]
		public class EyesDetector : GLib.Object {
			public EyesDetector ();
			public void run (OpenCV.IPL.Image? inInput, OpenCV.Point inLT);
			public bool eyes_detected { get; }
			public XSAA.FaceAuthentification.Eyes eyes_information { get; }
		}
		[CCode (cheader_filename = "xsaa-face-authentification.h")]
		public class FaceDetector : GLib.Object {
			public FaceDetector ();
			public OpenCV.IPL.Image? clip_detected_face (OpenCV.IPL.Image inInput);
			public void run (OpenCV.IPL.Image? inInput);
			public bool face_detected { get; }
			public XSAA.FaceAuthentification.Face face_information { get; }
		}
		[CCode (ref_function = "xsaa_face_authentification_face_images_ref", unref_function = "xsaa_face_authentification_face_images_unref", cheader_filename = "xsaa-face-authentification.h")]
		public class FaceImages {
			public OpenCV.IPL.Image[] faces;
			public FaceImages ();
		}
		[CCode (cheader_filename = "xsaa-face-authentification.h")]
		public class Tracker : GLib.Object {
			public Tracker ();
			public void find_point (OpenCV.Point inP1, ref OpenCV.Point outP2);
			public void set_model (OpenCV.IPL.Image inInput);
			public void track_image (OpenCV.IPL.Image inInput);
			public OpenCV.Point anchor_point { get; set; }
			public double last_difference_1 { get; set; }
			public double last_difference_2 { get; set; }
		}
		[CCode (cheader_filename = "xsaa-face-authentification.h")]
		public class Verifier : GLib.Object {
			public Verifier ();
			public void add_face_set (OpenCV.IPL.Image[] inSet);
			public void create_biometric_models (string? inSetName = null);
			public XSAA.FaceAuthentification.FaceSet? get_face_set ();
			public void remove_face_set (string inSetName);
			public Verifier.uid (Os.uid_t inUid);
			public XSAA.FaceAuthentification.VerifyStatus verify_face (OpenCV.IPL.Image? inFace);
			public string config_directory { get; private set; }
			public string faces_directory { get; private set; }
			public string model_directory { get; private set; }
		}
		[CCode (cheader_filename = "xsaa-face-authentification.h")]
		public class Webcam : GLib.Object {
			public Webcam (int inCameraIndex = 0);
			public Cairo.Surface? frame_to_cairo_surface (OpenCV.IPL.Image inImage);
			public Cairo.Surface? paint_ellipse (OpenCV.IPL.Image inImage, OpenCV.Point inLeftEye, OpenCV.Point inRightEye);
			public OpenCV.IPL.Image? query_frame ();
			public bool start ();
			public void stop ();
		}
		[CCode (type_id = "XSAA_FACE_AUTHENTIFICATION_TYPE_EYES", cheader_filename = "xsaa-face-authentification.h")]
		public struct Eyes {
			public OpenCV.Point le;
			public OpenCV.Point re;
			public int length;
		}
		[CCode (type_id = "XSAA_FACE_AUTHENTIFICATION_TYPE_FACE", cheader_filename = "xsaa-face-authentification.h")]
		public struct Face {
			public OpenCV.Point lt;
			public OpenCV.Point rb;
			public int width;
			public int height;
		}
		[CCode (type_id = "XSAA_FACE_AUTHENTIFICATION_TYPE_FACE_SET", cheader_filename = "xsaa-face-authentification.h")]
		public struct FaceSet {
			public string[] name;
			public XSAA.FaceAuthentification.FaceImages[] face_images;
			public string[] thumbnails;
			public int count;
		}
		[CCode (cprefix = "XSAA_FACE_AUTHENTIFICATION_MACE_DEFAULT_", cheader_filename = "xsaa-face-authentification.h")]
		public enum MaceDefault {
			FACE,
			EYE,
			INSIDE_FACE
		}
		[CCode (cprefix = "XSAA_FACE_AUTHENTIFICATION_STATUS_", cheader_filename = "xsaa-face-authentification.h")]
		public enum Status {
			STOPPED,
			STARTED
		}
		[CCode (cprefix = "XSAA_FACE_AUTHENTIFICATION_VERIFY_STATUS_", cheader_filename = "xsaa-face-authentification.h")]
		public enum VerifyStatus {
			IMPOSTER,
			OK,
			NO_BIOMETRICS
		}
		[CCode (cheader_filename = "xsaa-face-authentification.h")]
		public const string USER_CONFIG_PATH;
		[CCode (cheader_filename = "xsaa-face-authentification.h")]
		public static double center_of_mass (OpenCV.IPL.Image inSrc, bool inFlagXY);
		[CCode (cheader_filename = "xsaa-face-authentification.h")]
		public static bool check_bit (int inI);
		[CCode (cheader_filename = "xsaa-face-authentification.h")]
		public static void feature_lbp_hist (OpenCV.IPL.Image inImage, OpenCV.Matrix inFeaturesFinal);
		[CCode (cheader_filename = "xsaa-face-authentification.h")]
		public static double get_bit (OpenCV.IPL.Image inImage, double inPx, double inPy, double inThreshold);
		[CCode (cheader_filename = "xsaa-face-authentification.h")]
		public static double lbp_diff (OpenCV.Matrix inModel, OpenCV.Matrix inTest);
		[CCode (cheader_filename = "xsaa-face-authentification.h")]
		public static void paint_cyclops (OpenCV.IPL.Image inImage, OpenCV.Point inLeftEye, OpenCV.Point inRightEye);
		[CCode (cheader_filename = "xsaa-face-authentification.h")]
		public static int peak_to_side_lobe_ratio (OpenCV.Matrix inMaceFilterVisualize, OpenCV.IPL.Image inImage, int inSizeOfImage);
		[CCode (cheader_filename = "xsaa-face-authentification.h")]
		public static void rotate (double inAngle, float inCentreX, float inCentreY, OpenCV.IPL.Image inImg, OpenCV.IPL.Image inDstImg);
		[CCode (cheader_filename = "xsaa-face-authentification.h")]
		public static void shift_dft (OpenCV.Array inSrcArr, OpenCV.Array inDstArr);
	}
}
